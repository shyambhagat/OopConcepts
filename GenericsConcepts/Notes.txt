
Generics Concepts Project Notes

Overview
This project demonstrates the use of generics in C#, including generic classes, methods, and constraints. The example simulates a generic repository that can manage different types of entities, as well as a utility class with generic methods.

Key Components

1. Entity Class
   - A base class representing a general entity with an `Id` property.
   - Serves as the base for other entities like Customer and Order.

2. Customer and Order Classes
   - Derived from the Entity class, these classes represent specific types of entities:
     - Customer: Has properties like `Name` and `Email`.
     - Order: Has properties like `Product` and `Quantity`.

3. GenericRepository Class
   - A generic class that acts as a repository for any type that derives from Entity.
   - Methods:
     - Add: Adds an entity to the internal list.
     - GetById: Retrieves an entity by its `Id`.
     - GetAll: Returns all entities in the repository.
     - Remove: Removes an entity from the repository by `Id`.
   - The `where T : Entity` constraint ensures that the generic type `T` must inherit from Entity, making the repository safe and specific to entities.

4. Utilities Class
   - A static class containing generic methods:
     - Max: Returns the maximum of two values. The `where T : IComparable<T>` constraint ensures that the generic type `T` can be compared.
     - Swap: Swaps the values of two variables using `ref` parameters.

Application
The project showcases how to use generics to build flexible and reusable components in C#. The GenericRepository class allows for the management of collections of different entity types, while the Utilities class provides general-purpose methods that operate on any type meeting the specified constraints.

Usage
- The GenericRepository class can manage entities like Customer and Order by adding, retrieving, and removing them from the repository.
- The Utilities class provides generic methods for common operations, such as finding the maximum value and swapping two values.
- The Program.cs file demonstrates the usage of these generic components, performing operations on Customer and Order entities and using utility methods on basic data types.

