
Employee Collection with Indexers Project Notes

Overview
This project demonstrates the use of indexers in C#, allowing objects to be indexed like arrays. The example simulates a collection of employees where you can access and modify employees either by their position in the list or by their ID.

Key Components

1. Employee Class
   - Represents an individual employee with properties for `Id`, `Name`, and `Department`.
   - A constructor initializes these properties when a new `Employee` object is created.

2. EmployeeCollection Class
   - Contains a private list of `Employee` objects.
   - Indexer with Integer Index:
     - Allows access to employees by their position in the list, similar to array indexing.
     - The `get` accessor retrieves an employee at the specified index.
     - The `set` accessor allows modifying an employee at the specified index.
   - Indexer with String Index:
     - Allows access to employees by their ID (as a string).
     - The `get` accessor retrieves an employee based on their ID.
   - Add Method:
     - Adds a new `Employee` to the collection.
   - Count Property:
     - Returns the total number of employees in the collection.

Application
The project showcases the practical use of indexers to manage and access elements within a collection. By using both integer and string-based indexers, the EmployeeCollection class provides a flexible way to interact with employee data, either by position or by a unique identifier.

Usage
- The integer indexer allows you to access and modify employees by their position in the list.
- The string indexer allows you to access employees directly by their ID.
- The Add method allows adding new employees to the collection, and the Count property tracks the number of employees.

