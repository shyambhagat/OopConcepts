ConstructorConcepts Project Notes

Overview
This project demonstrates the use of various constructors in C#, including default, parameterized, copy constructors, and the Singleton pattern implemented through a private constructor.

Key Classes

1. Customer Class
   - Default Constructor:
     Initializes a Customer object with default values for CustomerId and LoyaltyLevel.
   - Parameterized Constructor:
     Allows setting properties (FullName, Age, CustomerId, LoyaltyLevel) during object creation.
   - Copy Constructor:
     Creates a new Customer object by copying an existing one.

2. Employee Class
   - Static Constructor:
     Initializes static members of the class, like EmployeeCount, which tracks the total number of Employee instances.
   - Default Constructor:
     Initializes an Employee object with default values for EmployeeId and Department, and increments the EmployeeCount.
   - Parameterized Constructor:
     Allows setting properties (FullName, Age, EmployeeId, Department) during object creation, and also increments the EmployeeCount.
   - Copy Constructor:
     Creates a new Employee object by copying an existing one, and increments the EmployeeCount.

3. DatabaseConnection Class (Singleton Pattern)
   - Private Constructor:
     Prevents direct instantiation, ensuring only one instance of the class is ever created.
   - Static Property (Instance):
     Provides a global access point to the single instance of the DatabaseConnection class, using lazy initialization.
   - Example Methods:
     - ExecuteQuery: Simulates executing a database query.
     - ShowConnectionDetails: Displays details about the database connection, such as the connection string and when the connection was established.

Application
The project showcases the practical use of constructors and the Singleton pattern in a real-world scenario. By managing customer and employee data and simulating a database connection, it illustrates the importance of constructors in object-oriented programming.

